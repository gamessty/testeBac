model Folder {
    id             String               @id @default(auto()) @map("_id") @db.ObjectId
    category       String               @default("BAC")
    additionalData AdditionalFolderData
    subjects       Subject[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("folders")
}

model Subject {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    folderId  String     @db.ObjectId
    name      String     @unique
    questions Question[]
    chapters  Chapter[]

    folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("subjects")
}

model Chapter {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    subjectId String     @db.ObjectId
    name      String     @unique
    questions Question[]

    subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

    createdBy   User?   @relation(fields: [createdById], references: [id])
    createdById String? @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("chapters")
}

type AdditionalFolderData {
    country     String?
    year        Int?
    description String?
    image       String?
    color       String?
}

model UserTest {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    userId          String           @db.ObjectId
    questions       Question[]
    selectedAnswers SelectedAnswer[]
    score           Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("userTests")
}

type SelectedAnswer {
    // NOT YET IMPLEMENTED TBD
    answer     String// the uuid of the option
    questionId String @db.ObjectId
}
