model Question {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    subjectId      String?        @db.ObjectId
    chapterId      String?        @db.ObjectId
    userTestId     String?        @db.ObjectId
    type           QuestionType
    answer         String? // the answer to the question, used in case of fill in the blank or true/false
    question       String
    options        Option[]
    additionalData AdditionalData
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt

    subject  Subject?  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    chapter  Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    userTest UserTest? @relation(fields: [userTestId], references: [id], onDelete: Cascade)

    @@map("questions")
}

enum QuestionType {
    singleChoice
    simpleMultipleChoice
    composedMultipleChoice // multiple choice with multiple correct answers, bucuresti umfcv, cu 1,2,3,4
    trueFalse
    fillInTheBlank
}

type Option {
    //TBD the id system
    id           String @default(uuid())
    option       String
    image        String?
    code         Code[]
    isCorrect    Boolean        @default(false)
    localization Localization[]
}

type AdditionalData {
    image        String?
    code         Code[]
    explanation  AnswerIndicator?
    localization Localization[]
}

type Localization {
    locale String
    text   String
}

type AnswerIndicator {
    code     Code[]
    markdown String
}

/**
 * Code Block
 * the default language to be displayed in case the user's preferance is not set is going to be determined in the following order:
 * 1. The language with the first default optional value
 * 2. The first language in the list
 */
type Code {
    language String[]
    code     String
    default  Boolean  @default(false)
}
